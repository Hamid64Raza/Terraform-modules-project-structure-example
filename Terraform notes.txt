Terraform

-> It is IAAC (Infrastructure As A Code)
-> We we HCL as language
-> Work with most of the Cloud platforms like AWS, GCP, Azure etc
-> Install Terrfaorm
-> Install VS Code

HCL Syntax:

Blocks - 

blocks {

	key= value ( value can be string, number, boolean, list, map )


}

____________________________
Practical Example Script:
____________________________

provider "aws" {
	
	region = "ap-south-1"
	access_key = ""
	secret_key = ""
}

resource "aws_instance" "vm_1" {
	
	ami = "ami-id"
	instance_type = "t2.micro"
	key_name = "devopssession"
	security_groups = ["default"]
	tags = {
		Name = "LinuxVM"
	}
}

terraform init->terraform validate->terraform fmt->terraform plan->terraform apply or terraform apply --auto-approve--> terraform destory --auto-approve


Example 2: Input / Output Variables in terraform

variable "ami" {
    description = "Amazon machine image id"
    default  = "ami-0d682f26195e9ec0f"
}

variable "instance_type" {
    description = "Represens EC2 instance type"
    default = "t2.micro"
}

variable "key_name" {
    description = ""
    default = "devops_session_1"
}

provider "aws" {

  region     = "ap-south-1"
  access_key = ""
  secret_key = ""
}



resource "aws_instance" "linux_vm" {

  ami             = "${var.ami}"
  instance_type   = "${var.instance_type}"
  key_name        = "${var.key_name}"
  security_groups = ["default"]
  tags = {
    Name = "LinuxVM"
  }
}

output "ec2_vm_public_ip" {
  value = aws_instance.linux_vm.public_ip
}

output "ec2_private_ip" {
  value = aws_instance.linux_vm.private_ip
}

output "ec2_subnet_id"{
    value = aws_instance.linux_vm.subnet_id
}

output "ec2_complete_info"{
    value = aws_instance.linux_vm
}


example 3: Creating multiple instances in terraform


locals {

  instances_count = 3

  instances_tags = [
    {
      Name = "Dev-Server"
    },
    {
      Name = "QA-Server"
    },
    {
      Name = "UAT-Server"
    }
  ]
}

resource "aws_instance" "test_ec2_vm" {
  count           = locals.instances_count
  ami             = var.ami
  instance_type   = var.instance_type
  key_name        = var.key_name
  security_groups = ["default"]
  tags = locals.instances_tags[count.index]
}

output "instance_ids" {	
	value = aws_instance.test_ec2_vm[*].pubic_ip
}


Modules In Terraform (Project)
___________________________________

Step-1 : Create Project directory

        Ex: tcs

Step-2 : Create "modules" directory inside project directory tcs

        Ex: tcs
                - modules

Step-3 : Create "ec2" and "s3" directories inside (modules) directory

        Ex :   -tcs
                 - modules
                     - ec2
                     - s3

Step-4 : Create terraform scripts inside "ec2" directory

            inputs.tf
            main.tf
            outputs.tf         

Step-5 : Create terraform scripts inside "s3" directory

            inputs.tf
            main.tf
            outputs.tf          


Step-6 : create "provider.tf" file in root module tcs


Step-7 : create "main.tf" file in root module and invoke child modules from root module using the following

module "my_ec2"{
    source = "./modules/ec2"
}

module "my_s3" {
    source = "./modules/s3"
}


Step-8: Create "ouputs.tf" in project root module and access child modules related outputs.

output "test_vm_public_ip"{
    value = module.my_ec2.a1
}

output "test_vm_private_ip" {
    value = module.my_ec2.a2
}

Note: here a1 and a2 are ouput variables declared in ec2 module ouputs.tf file
